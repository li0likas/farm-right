// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  username          String?   @unique
  password          String?
  email             String?   @unique
  birthDate         DateTime?
  gender            String?
  address           String?
  phoneNumber       String?
  profile_picture   String?
  registration_date DateTime?

  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  hash           String
  resetPassToken String   @default("")
  isResetValid   Boolean  @default(false)
  colourHex      String   @default("#000000")
  emoji          String   @default("")

  roles          UserRole[]

  @@map("users")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  users     UserRole[]
  rights    RoleRight[]
}

model Permission {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  roleRights RoleRight[]
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    Int
  roleId    Int
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  @@unique([userId, roleId])
}

model RoleRight {
  id           Int       @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role      @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  @@unique([roleId, permissionId])
}

model Field {
  id        Int     @id @default(autoincrement())
  name      String
  area      Float
  perimeter Float
  cropId    Int
  crop      FieldCropOptions @relation(fields: [cropId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks     Task[]
}

model Task {
  id        Int      @id @default(autoincrement())
  typeId    Int
  type      TaskTypeOptions @relation(fields: [typeId], references: [id])
  description String?
  dueDate   DateTime?
  completionDate DateTime?
  status    String?
  fieldId   Int
  field     Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments  Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int       // Foreign key to Task
}

model FieldCropOptions {
  id   Int    @id @default(autoincrement())
  name String

  fields Field[] 
}

model TaskTypeOptions {
  id   Int    @id @default(autoincrement())
  name String

  tasks Task[]
}