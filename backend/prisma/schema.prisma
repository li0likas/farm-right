// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  username          String?   @unique
  password          String?
  email             String?   @unique
  birthDate         DateTime?
  gender            String?
  address           String?
  phoneNumber       String?
  profile_picture   String?
  registration_date DateTime?

  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  hash           String
  resetPassToken String   @default("")
  isResetValid   Boolean  @default(false)
  colourHex      String   @default("#000000")
  emoji          String   @default("")

  fields         Field[]
  equipments     Equipment[]
  farms          Farm[]    @relation("OwnerFarms")
  memberships    FarmMember[]
  comments       Comment[] @relation("UserComments")

  @@map("users")
}

model Role {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  farmMembers     FarmMember[]
  farmPermissions FarmRolePermission[]
}

model Permission {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  farmPermissions FarmRolePermission[]
}

model FarmRolePermission {
  id            Int         @id @default(autoincrement())
  farmId        Int
  roleId        Int
  permissionId  Int
  farm          Farm        @relation(fields: [farmId], references: [id])
  role          Role        @relation(fields: [roleId], references: [id])
  permission    Permission  @relation(fields: [permissionId], references: [id])

  @@unique([farmId, roleId, permissionId]) // Ensure unique permission per farm & role
}

model Farm {
  id              Int             @id @default(autoincrement())
  name            String
  ownerId         Int
  owner           User            @relation("OwnerFarms", fields: [ownerId], references: [id])
  members         FarmMember[]
  fields          Field[]
  rolePermissions FarmRolePermission[]
  equipments     Equipment[]
}

model FarmMember {
  id          Int       @id @default(autoincrement())
  userId      Int
  farmId      Int
  roleId      Int
  user        User      @relation(fields: [userId], references: [id])
  farm        Farm      @relation(fields: [farmId], references: [id])
  role        Role      @relation(fields: [roleId], references: [id]) 

  @@unique([userId, farmId]) 
}

model Field {
  id        Int     @id @default(autoincrement())
  name      String
  area      Float
  perimeter Float
  cropId    Int
  farmId    Int
  crop      FieldCropOptions @relation(fields: [cropId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   Int
  owner     User         @relation(fields: [ownerId], references: [id])
  farm      Farm      @relation(fields: [farmId], references: [id])
  boundary  Json

  tasks     Task[]
}

model Task {
  id        Int      @id @default(autoincrement())
  typeId    Int
  type      TaskTypeOptions @relation(fields: [typeId], references: [id])
  statusId  Int
  status    TaskStatusOptions @relation(fields: [statusId], references: [id])
  description String?
  dueDate   DateTime?
  completionDate DateTime?
  fieldId   Int
  field     Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  equipments  TaskEquipment[]

  comments  Comment[]
}

model Equipment {
  id          Int     @id @default(autoincrement())
  name        String
  typeId      Int
  type        EquipmentTypeOptions @relation(fields: [typeId], references: [id])
  description String?
  ownerId     Int
  owner       User    @relation(fields: [ownerId], references: [id])
  farmId      Int
  farm        Farm    @relation(fields: [farmId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks       TaskEquipment[]
}

model TaskEquipment {
  id          Int  @id @default(autoincrement())
  taskId      Int
  equipmentId Int
  task        Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, equipmentId])
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  taskId     Int
  task       Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdById Int
  createdBy   User     @relation("UserComments", fields: [createdById], references: [id])
}

model FieldCropOptions {
  id   Int    @id @default(autoincrement())
  name String

  fields Field[] 
}

model TaskTypeOptions {
  id   Int    @id @default(autoincrement())
  name String

  tasks Task[]
}

model TaskStatusOptions {
  id   Int    @id @default(autoincrement())
  name String

  tasks Task[]
}

model EquipmentTypeOptions {
  id   Int    @id @default(autoincrement())
  name String @unique

  equipment Equipment[]
}
